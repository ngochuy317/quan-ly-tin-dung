name: CI

on:
  push:
    branches: [ main ]


# jobs:
#   deploy:
#     name: deploy
#     runs-on: ubuntu-20.04
#     defaults:
#       run:
#         working-directory: .

#     steps:
#       - name: Checkout Repo
#         uses: actions/checkout@v1

#       - name: Copy repository contents via scp
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USERNAME }}
#           port: 22
#           password: ${{ secrets.SSH_PASSWORD }}
#           source: "."
#           target: "/var/www/mywebsite"

#       - name: Deploy to VPS via SSH action
#         uses: appleboy/ssh-action@master
#         env:
#           POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
#           POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#           POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
#           POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
#           USE_SPACES: ${{ secrets.USE_SPACES }}
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
#           AWS_S3_ENDPOINT_URL: ${{ secrets.AWS_S3_ENDPOINT_URL }}
#           SECRET_KEY: ${{ secrets.SECRET_KEY }}
#           DEBUG: ${{ secrets.DEBUG }}
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USERNAME }}
#           key: ${{ secrets.SSH_KEY }}
#           port: 22
#           command_timeout: 200m
#           envs: POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_HOST,POSTGRES_DB,USE_SPACES,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_STORAGE_BUCKET_NAME,AWS_S3_ENDPOINT_URL,SECRET_KEY,DEBUG
#           script: |
#             cd /var/www/mywebsite
#             rm -f .env
#             touch .env
#             echo POSTGRES_USER=$POSTGRES_USER >> .env
#             echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> .env
#             echo POSTGRES_HOST=$POSTGRES_HOST >> .env
#             echo POSTGRES_DB=$POSTGRES_DB >> .env
#             echo USE_SPACES=$USE_SPACES >> .env
#             echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> .env
#             echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> .env
#             echo AWS_STORAGE_BUCKET_NAME=$AWS_STORAGE_BUCKET_NAME >> .env
#             echo AWS_S3_ENDPOINT_URL=$AWS_S3_ENDPOINT_URL >> .env
#             echo SECRET_KEY=$SECRET_KEY >> .env
#             echo DEBUG=$DEBUG >> .env
#             docker compose stop
#             docker compose rm -f
#             docker rmi -f $(docker images --filter "dangling=true" -q --no-trunc)
#             docker rm -f $(docker ps -a -q)
#             docker compose build --no-cache
#             docker compose up -d

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Login Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker qltd be
        run: docker build -t qltd-be -f ./be/be.Dockerfile .

      - name: Tagging Image qltd be
        run: docker tag qltd-be alan317/qltd-be:lastest

      - name: Build Docker qltd fe
        run: docker build -t qltd-fe -f ./fe_app/Dockerfile --build-arg REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} .

      - name: Tagging Image qltd fe
        run: docker tag qltd-fe alan317/qltd-fe:lastest

      - name: Build Docker qltd nginx
        run: docker build -t qltd-nginx -f ./nginx/nginx.Dockerfile .

      - name: Tagging Image qltd nginx
        run: docker tag qltd-nginx alan317/qltd-nginx:lastest

      - name: Push Docker Image qltd-be
        run: docker push alan317/qltd-be:lastest

      - name: Push Docker Image qltd-fe
        run: docker push alan317/qltd-fe:lastest

      - name: Push Docker Image qltd-nginx
        run: docker push alan317/qltd-nginx:lastest

      - name: Copy repository contents via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: 22
          password: ${{ secrets.SSH_PASSWORD }}
          source: "."
          target: "/var/www/mywebsite"

      - name: Deploy to VPS via SSH action
        uses: appleboy/ssh-action@master
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          USE_SPACES: ${{ secrets.USE_SPACES }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          AWS_S3_ENDPOINT_URL: ${{ secrets.AWS_S3_ENDPOINT_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: ${{ secrets.DEBUG }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          command_timeout: 200m
          envs: POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_HOST,POSTGRES_DB,USE_SPACES,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_STORAGE_BUCKET_NAME,AWS_S3_ENDPOINT_URL,SECRET_KEY,DEBUG
          script: |
            cd /var/www/mywebsite
            rm -f .env
            touch .env
            echo POSTGRES_USER=$POSTGRES_USER >> .env
            echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> .env
            echo POSTGRES_HOST=$POSTGRES_HOST >> .env
            echo POSTGRES_DB=$POSTGRES_DB >> .env
            echo USE_SPACES=$USE_SPACES >> .env
            echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> .env
            echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> .env
            echo AWS_STORAGE_BUCKET_NAME=$AWS_STORAGE_BUCKET_NAME >> .env
            echo AWS_S3_ENDPOINT_URL=$AWS_S3_ENDPOINT_URL >> .env
            echo SECRET_KEY=$SECRET_KEY >> .env
            echo DEBUG=$DEBUG >> .env
            docker compose stop
            docker compose rm -f
            docker image prune -af
            docker rm -f $(docker ps -a -q)
            docker compose up -d
